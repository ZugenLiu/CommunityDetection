package edu.czy.load;

/**
 * 
 */

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;



import edu.czy.datastructure.Edge;
import edu.czy.datastructure.Vertex;
import edu.uci.ics.jung.graph.SparseGraph;
import edu.uci.ics.jung.graph.util.EdgeType;

/**
 * @author ZHANPEISEN
 * @date 2013-1-9
 */

public class LoadGML<V extends Vertex,E extends Edge>{

	private Class<V> classV;
	private Class<E> classE;
	private SparseGraph<V, E> graph;
	private Map<Long, V> nodeMap;
	private EdgeType edgeType;
	/**
	 * 
	 * @param classV used to get a Class Object of the generic class V
	 * @param classE used to get a Class Object of the generic class E
	 */	
	public LoadGML(Class<V> classV, Class<E> classE){
		this.classV = classV;
		this.classE = classE;
		graph = new SparseGraph<V, E>();
		nodeMap = new HashMap<Long, V>();
		edgeType = EdgeType.UNDIRECTED;
	}

	/**
	 * load the data file and translate the data into a graph
	 * @return true for successful loading, otherwise false
	 */
	public SparseGraph<V, E> loadGraph(String filePath){
		System.out.println("start loading!");
		if(!filePath.endsWith(".gml")){
			System.out.println("This is not a gml file, please check the file!");
			System.exit(0);
		}
		if(graph.getVertexCount() != 0 && nodeMap.size() != 0){
			for(V v: nodeMap.values()){
				graph.removeVertex(v);
			}
			nodeMap.clear();
		}
		Stack<String> symbolSecure = new Stack<String>();
		BufferedReader loader = null;
		String line = null;
		try{
			loader = new BufferedReader(new FileReader(filePath));
			while((line = loader.readLine()) != null)
				if(line.trim().contains("graph")){
					if(line.contains("["))
						symbolSecure.push("[");
					break;
				}
			while((line = loader.readLine()) != null){
				if(line.trim().equals("[")){
					symbolSecure.push("[");
				}else if(line.trim().matches("directed\\s1")){
					edgeType = EdgeType.DIRECTED;
				}else if(line.trim().contains("node")){
					//record the block of a node
					if(line.contains("["))
						symbolSecure.push("[");
					StringBuilder nodeInfo = new StringBuilder("");
					while(true){
						line = loader.readLine().trim();
						if(line.trim().equals("["))
							symbolSecure.push("[");
						else if(line.contains("id")){
							nodeInfo.append(line + " ");
						}else if(line.contains("label")){
							nodeInfo.append(line + " ");
						}else if(line.contains("value")){
							nodeInfo.append(line + " ");
						}else if(line.contains("]")){
							symbolSecure.pop();
							if(symbolSecure.size() == 1)
								break;
						}
					}
					addVertex(nodeInfo.toString());
				}else if(line.trim().contains("edge")){
					//record the block of an edge
					if(line.contains("["))
						symbolSecure.push("[");
					StringBuilder edgeInfo = new StringBuilder("");
					while(true){
						line = loader.readLine().trim();
						if(line.trim().equals("["))
							symbolSecure.push("[");
						else if(line.contains("source")){
							edgeInfo.append(line + " ");
						}else if(line.contains("target")){
							edgeInfo.append(line + " ");
						}else if(line.contains("value")){
							edgeInfo.append(line + " ");
						}else if(line.contains("label")){
							edgeInfo.append(line + " ");
						}else if(line.equals("]")){
							symbolSecure.pop();
							if(symbolSecure.size() == 1)
								break;
						}
					}
					addEdge(edgeInfo.toString());
				}else if(line.contains("]"))
					symbolSecure.pop();
			}
			loader.close();
			if(!symbolSecure.isEmpty()){
				System.out.println("File's format has some error,Please check the file!");
				System.exit(0);
			}else{
				System.out.println("There are " + graph.getVertexCount() 
						+ " nodes, and " + graph.getEdgeCount() + " edges in graph");
			}
		}catch(Exception e){
			System.out.println("File read error!");
			e.printStackTrace();
		}
		return graph;
	}
	/**
	 * method used to translate the vertex information into an V object and then add the vertex to the graph.
	 * @param nodeInfo information includes the node's id and its label
	 * @throws InstantiationException
	 * @throws IllegalAccessException
	 */
	private void addVertex(String nodeInfo) throws InstantiationException, IllegalAccessException{
		V vertex = classV.newInstance();
		String[] temp = nodeInfo.split("\\s");
		for(int i = 0; i != temp.length; i++){
			if(temp[i].trim().equals("id")){
				i++;
				if(temp[i].trim().startsWith("\""))			//for GML file generated by Gephi
					temp[i] = specialGML(temp[i].trim());
				long id = Long.parseLong(temp[i]);
				vertex.setId((int)id);
				//init the label by id
				vertex.setValue(String.valueOf(id));
			}else if(temp[i].trim().equals("label")){
				i++;
				String label = temp[i].trim();
				vertex.setLabel(label);
			}else if(temp[i].trim().equals("value")){
				//record the ground-truth as value
				i++;
				String value = temp[i].trim();
				
				vertex.setGroundTruth(value);
			}
		}
		graph.addVertex(vertex);
		nodeMap.put(vertex.getId(), vertex);
	}
	/**
	 * method used to translate the edge information into an E object and then add the edge to the graph.
	 * @param edgeInfo edge information includes the source and target vertices and the weight
	 * @throws InstantiationException
	 * @throws IllegalAccessException
	 */
	private void addEdge(String edgeInfo) throws InstantiationException, IllegalAccessException{
		E edge = classE.newInstance();
		String[] temp = edgeInfo.split("\\s");
		for(int i = 0; i < temp.length; i++){
			if(temp[i].trim().equals("source")){
				i++;										//go to the value's index
				if(temp[i].trim().startsWith("\""))			//for GML file generated by Gephi
					temp[i] = specialGML(temp[i].trim());
				long sourceID = Long.parseLong(temp[i]);
				edge.setSourceID(sourceID);
			}else if(temp[i].trim().equals("target")){
				i++;
				if(temp[i].trim().startsWith("\""))
					temp[i] = specialGML(temp[i].trim());
				long targetID = Long.parseLong(temp[i]);
				edge.setTargetID(targetID);
			}else if(temp[i].trim().equals("value")){		//add weight
				i++;
				if(temp[i].trim().startsWith("\""))
					temp[i] = specialGML(temp[i].trim());
				double weight = Double.parseDouble(temp[i]);
				edge.setWeight(weight);
			}else if(temp[i].trim().equals("label")){
				i++;
				edge.setLabel(temp[i].trim());
			}
		}
		graph.addEdge(edge, nodeMap.get(edge.getSourceID()), nodeMap.get(edge.getTargetID()), edgeType);
	}
	
	/**
	 * gml file generated by gephi is special, need to remove the character ""
	 * @param id string format likes "id"
	 * @return string as id without ""
	 */
	private String specialGML(String id){
		int startIndex = id.indexOf("\"") + 1;
		int endIndex = id.lastIndexOf("\"");
		String pureID = id.substring(startIndex, endIndex);
		return pureID;
	}

	/**
	 * provide a map of all vertices with vertices'id being the map key 
	 * @return the nodeSet
	 */
	/*
	public Map<Long, V> getNodeMap() {
		return nodeMap;
	}*/

}
